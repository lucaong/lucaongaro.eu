<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Luca Ongaro's blog</title>
  <subtitle>Programming, engineering, and some science too</subtitle>
  <id>https://lucaongaro.eu/blog</id>
  <link href="https://lucaongaro.eu/blog"/>
  <link href="https://lucaongaro.eu/blog/feed.xml" rel="self"/>
  <updated>2019-01-30T16:08:00+01:00</updated>
  <author>
    <name>Luca Ongaro</name>
  </author>
  <entry>
    <title>MiniSearch, a client-side full-text search engine</title>
    <link rel="alternate" href="https://lucaongaro.eu/blog/2019/01/30/minisearch-client-side-fulltext-search-engine.html"/>
    <id>https://lucaongaro.eu/blog/2019/01/30/minisearch-client-side-fulltext-search-engine.html</id>
    <published>2019-01-30T16:08:00+01:00</published>
    <updated>2019-02-01T16:35:17+01:00</updated>
    <author>
      <name>Luca Ongaro</name>
    </author>
    <summary type="html">&lt;p&gt;This blog post is to introduce
&lt;a href="https://github.com/lucaong/minisearch"&gt;MiniSearch&lt;/a&gt;, a JavaScript library that
provides &lt;strong&gt;client-side full-text search&lt;/strong&gt; capabilities. It has zero runtime
dependencies, and uses a space optimized index to support memory constrained
environments like mobile browsers. It offers &lt;strong&gt;prefix search&lt;/strong&gt;, &lt;strong&gt;fuzzy match&lt;/strong&gt;,
&lt;strong&gt;boosting&lt;/strong&gt;, &lt;strong&gt;auto suggestions&lt;/strong&gt;, and many of the features expected from a
server-side search engine like Solr or Elastic Search.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MiniSearch&lt;/strong&gt; is designed to be flexible and easy to use, and I think that a
quick example…&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Adopting best practices without being adopted by them</title>
    <link rel="alternate" href="https://lucaongaro.eu/blog/2018/09/19/adopting-best-practices-without-being-adoopted.html"/>
    <id>https://lucaongaro.eu/blog/2018/09/19/adopting-best-practices-without-being-adoopted.html</id>
    <published>2018-09-19T16:03:00+02:00</published>
    <updated>2019-02-01T17:53:47+01:00</updated>
    <author>
      <name>Luca Ongaro</name>
    </author>
    <summary type="html">&lt;p&gt;A software developer I know was recently faced with a problem: when practicing
Test Driven Development (abbreviated as TDD), they felt that the resulting code
tended not to follow design patterns. How can one achieve well structured code,
that follows the Design Patterns, through TDD?&lt;/p&gt;

&lt;p&gt;I feel that this is an interesting question, because it uncovers some important
considerations on the way software development is taught and practiced.&lt;/p&gt;

&lt;p&gt;The issue, in my opinion, stems from a wrong (but understandable…&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Delayed jobs with Rails and RabbitMQ</title>
    <link rel="alternate" href="https://lucaongaro.eu/blog/2018/07/31/delayed-jobs-with-rails-and-rabbitmq.html"/>
    <id>https://lucaongaro.eu/blog/2018/07/31/delayed-jobs-with-rails-and-rabbitmq.html</id>
    <published>2018-07-31T15:34:00+02:00</published>
    <updated>2018-08-07T16:16:49+02:00</updated>
    <author>
      <name>Luca Ongaro</name>
    </author>
    <summary type="html">&lt;p&gt;I recently had the need to schedule background jobs with a specified delay into
the future from a Ruby on Rails application. I had to implement a retry
mechanism with backoff, so I needed to be able to express something like
“execute job X, but wait Y seconds before doing so”. Clearly, I needed this
mechanism to be non-blocking: if a job is scheduled 5 minutes in the future, the
workers should be free to process other jobs in the meantime.&lt;/p&gt;

&lt;p&gt;Some popular &lt;code&gt;ActiveJob&lt;/code&gt; adapters like Resque or Sidekiq…&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>On Engineering Software and Trade-Offs</title>
    <link rel="alternate" href="https://lucaongaro.eu/blog/2017/11/13/on-software-engineering-and-trade-offs.html"/>
    <id>https://lucaongaro.eu/blog/2017/11/13/on-software-engineering-and-trade-offs.html</id>
    <published>2017-11-13T14:36:00+01:00</published>
    <updated>2018-08-01T12:47:43+02:00</updated>
    <author>
      <name>Luca Ongaro</name>
    </author>
    <summary type="html">&lt;p&gt;As software developers, we tend to be quite opinionated about our tools and
techniques. Our own specific education and experiences shape our preferences,
and we often identify with several schools of thought. We might be, for example,
advocates of functional programming, practitioners of test driven development,
or microservices enthusiasts. On top of this, we all have our preferences when
it comes to technology: our favorite programming languages, databases,
infrastructure… These preferences shape…&lt;/p&gt;</summary>
  </entry>
</feed>
